/* Generated by Yosys 0.9+3521 (git sha1 12132b6, clang 3.8.0-2ubuntu4 -fPIC -Os) */

(* dynports =  1  *)
(* hdlname = "\\adder" *)
(* src = "../core/common/adder.sv:9.1-19.10" *)
module \$paramod\adder\WIDTH=32 (operand_a, operand_b, result);
  (* src = "../core/common/adder.sv:12.24-12.33" *)
  input [31:0] operand_a;
  (* src = "../core/common/adder.sv:13.24-13.33" *)
  input [31:0] operand_b;
  (* src = "../core/common/adder.sv:14.24-14.30" *)
  output [31:0] result;
  assign result = operand_a + (* src = "../core/common/adder.sv:17.21-17.42" *) operand_b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\multiplexer2" *)
(* src = "../core/common/multiplexer2.sv:9.1-27.10" *)
module \$paramod\multiplexer2\WIDTH=32 (in0, in1, sel, out);
  (* src = "../core/common/multiplexer2.sv:12.24-12.27" *)
  input [31:0] in0;
  (* src = "../core/common/multiplexer2.sv:13.24-13.27" *)
  input [31:0] in1;
  (* src = "../core/common/multiplexer2.sv:15.24-15.27" *)
  output [31:0] out;
  (* src = "../core/common/multiplexer2.sv:14.24-14.27" *)
  input sel;
  (* src = "../core/common/multiplexer2.sv:21.7-25.6" *)
  \$paramod\multiplexer\WIDTH=32\CHANNELS=2  multiplexer (
    .in_bus({ in0, in1 }),
    .out(out),
    .sel(sel)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\multiplexer4" *)
(* src = "../core/common/multiplexer4.sv:9.1-29.10" *)
module \$paramod\multiplexer4\WIDTH=32 (in0, in1, in2, in3, sel, out);
  (* src = "../core/common/multiplexer4.sv:12.24-12.27" *)
  input [31:0] in0;
  (* src = "../core/common/multiplexer4.sv:13.24-13.27" *)
  input [31:0] in1;
  (* src = "../core/common/multiplexer4.sv:14.24-14.27" *)
  input [31:0] in2;
  (* src = "../core/common/multiplexer4.sv:15.24-15.27" *)
  input [31:0] in3;
  (* src = "../core/common/multiplexer4.sv:17.24-17.27" *)
  output [31:0] out;
  (* src = "../core/common/multiplexer4.sv:16.24-16.27" *)
  input [1:0] sel;
  (* src = "../core/common/multiplexer4.sv:23.7-27.6" *)
  \$paramod\multiplexer\WIDTH=32\CHANNELS=4  multiplexer (
    .in_bus({ in0, in1, in2, in3 }),
    .out(out),
    .sel(sel)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\multiplexer8" *)
(* src = "../core/common/multiplexer8.sv:9.1-33.10" *)
module \$paramod\multiplexer8\WIDTH=32 (in0, in1, in2, in3, in4, in5, in6, in7, sel, out);
  (* src = "../core/common/multiplexer8.sv:12.24-12.27" *)
  input [31:0] in0;
  (* src = "../core/common/multiplexer8.sv:13.24-13.27" *)
  input [31:0] in1;
  (* src = "../core/common/multiplexer8.sv:14.24-14.27" *)
  input [31:0] in2;
  (* src = "../core/common/multiplexer8.sv:15.24-15.27" *)
  input [31:0] in3;
  (* src = "../core/common/multiplexer8.sv:16.24-16.27" *)
  input [31:0] in4;
  (* src = "../core/common/multiplexer8.sv:17.24-17.27" *)
  input [31:0] in5;
  (* src = "../core/common/multiplexer8.sv:18.24-18.27" *)
  input [31:0] in6;
  (* src = "../core/common/multiplexer8.sv:19.24-19.27" *)
  input [31:0] in7;
  (* src = "../core/common/multiplexer8.sv:21.24-21.27" *)
  output [31:0] out;
  (* src = "../core/common/multiplexer8.sv:20.24-20.27" *)
  input [2:0] sel;
  (* src = "../core/common/multiplexer8.sv:27.7-31.6" *)
  \$paramod\multiplexer\WIDTH=32\CHANNELS=8  multiplexer (
    .in_bus({ in0, in1, in2, in3, in4, in5, in6, in7 }),
    .out(out),
    .sel(sel)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\multiplexer" *)
(* src = "../core/common/multiplexer.sv:9.1-27.10" *)
module \$paramod\multiplexer\WIDTH=32\CHANNELS=2 (in_bus, sel, out);
  wire _0_;
  (* src = "../core/common/multiplexer.sv:12.45-12.51" *)
  input [63:0] in_bus;
  (* src = "../core/common/multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[0] ;
  (* src = "../core/common/multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[1] ;
  (* src = "../core/common/multiplexer.sv:14.45-14.48" *)
  output [31:0] out;
  (* src = "../core/common/multiplexer.sv:13.45-13.48" *)
  input sel;
  function [31:0] _1_;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/common/multiplexer.sv:0.0-0.0" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _1_ = b[31:0];
      2'b1?:
        _1_ = b[63:32];
      default:
        _1_ = a;
    endcase
  endfunction
  assign out = _1_(32'hxxxxxxxx, in_bus, { _0_, sel });
  assign _0_ = ~ (* full_case = 32'd1 *) (* src = "../core/common/multiplexer.sv:0.0-0.0" *) sel;
  assign \input_array[0]  = in_bus[63:32];
  assign \input_array[1]  = in_bus[31:0];
endmodule

(* dynports =  1  *)
(* hdlname = "\\multiplexer" *)
(* src = "../core/common/multiplexer.sv:9.1-27.10" *)
module \$paramod\multiplexer\WIDTH=32\CHANNELS=4 (in_bus, sel, out);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  (* src = "../core/common/multiplexer.sv:12.45-12.51" *)
  input [127:0] in_bus;
  (* src = "../core/common/multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[0] ;
  (* src = "../core/common/multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[1] ;
  (* src = "../core/common/multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[2] ;
  (* src = "../core/common/multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[3] ;
  (* src = "../core/common/multiplexer.sv:14.45-14.48" *)
  output [31:0] out;
  (* src = "../core/common/multiplexer.sv:13.45-13.48" *)
  input [1:0] sel;
  function [31:0] _4_;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/common/multiplexer.sv:0.0-0.0" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        _4_ = b[31:0];
      4'b??1?:
        _4_ = b[63:32];
      4'b?1??:
        _4_ = b[95:64];
      4'b1???:
        _4_ = b[127:96];
      default:
        _4_ = a;
    endcase
  endfunction
  assign out = _4_(32'hxxxxxxxx, in_bus, { _3_, _2_, _1_, _0_ });
  assign _0_ = sel == (* full_case = 32'd1 *) (* src = "../core/common/multiplexer.sv:0.0-0.0" *) 2'h3;
  assign _1_ = sel == (* full_case = 32'd1 *) (* src = "../core/common/multiplexer.sv:0.0-0.0" *) 2'h2;
  assign _2_ = sel == (* full_case = 32'd1 *) (* src = "../core/common/multiplexer.sv:0.0-0.0" *) 2'h1;
  assign _3_ = ! (* full_case = 32'd1 *) (* src = "../core/common/multiplexer.sv:0.0-0.0" *) sel;
  assign \input_array[0]  = in_bus[127:96];
  assign \input_array[1]  = in_bus[95:64];
  assign \input_array[2]  = in_bus[63:32];
  assign \input_array[3]  = in_bus[31:0];
endmodule

(* dynports =  1  *)
(* hdlname = "\\multiplexer" *)
(* src = "../core/common/multiplexer.sv:9.1-27.10" *)
module \$paramod\multiplexer\WIDTH=32\CHANNELS=8 (in_bus, sel, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  (* src = "../core/common/multiplexer.sv:12.45-12.51" *)
  input [255:0] in_bus;
  (* src = "../core/common/multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[0] ;
  (* src = "../core/common/multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[1] ;
  (* src = "../core/common/multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[2] ;
  (* src = "../core/common/multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[3] ;
  (* src = "../core/common/multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[4] ;
  (* src = "../core/common/multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[5] ;
  (* src = "../core/common/multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[6] ;
  (* src = "../core/common/multiplexer.sv:19.26-19.37" *)
  wire [31:0] \input_array[7] ;
  (* src = "../core/common/multiplexer.sv:14.45-14.48" *)
  output [31:0] out;
  (* src = "../core/common/multiplexer.sv:13.45-13.48" *)
  input [2:0] sel;
  function [31:0] _08_;
    input [31:0] a;
    input [255:0] b;
    input [7:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/common/multiplexer.sv:0.0-0.0" *)
    (* parallel_case *)
    casez (s)
      8'b???????1:
        _08_ = b[31:0];
      8'b??????1?:
        _08_ = b[63:32];
      8'b?????1??:
        _08_ = b[95:64];
      8'b????1???:
        _08_ = b[127:96];
      8'b???1????:
        _08_ = b[159:128];
      8'b??1?????:
        _08_ = b[191:160];
      8'b?1??????:
        _08_ = b[223:192];
      8'b1???????:
        _08_ = b[255:224];
      default:
        _08_ = a;
    endcase
  endfunction
  assign out = _08_(32'hxxxxxxxx, in_bus, { _07_, _06_, _05_, _04_, _03_, _02_, _01_, _00_ });
  assign _00_ = sel == (* full_case = 32'd1 *) (* src = "../core/common/multiplexer.sv:0.0-0.0" *) 3'h7;
  assign _01_ = sel == (* full_case = 32'd1 *) (* src = "../core/common/multiplexer.sv:0.0-0.0" *) 3'h6;
  assign _02_ = sel == (* full_case = 32'd1 *) (* src = "../core/common/multiplexer.sv:0.0-0.0" *) 3'h5;
  assign _03_ = sel == (* full_case = 32'd1 *) (* src = "../core/common/multiplexer.sv:0.0-0.0" *) 3'h4;
  assign _04_ = sel == (* full_case = 32'd1 *) (* src = "../core/common/multiplexer.sv:0.0-0.0" *) 3'h3;
  assign _05_ = sel == (* full_case = 32'd1 *) (* src = "../core/common/multiplexer.sv:0.0-0.0" *) 3'h2;
  assign _06_ = sel == (* full_case = 32'd1 *) (* src = "../core/common/multiplexer.sv:0.0-0.0" *) 3'h1;
  assign _07_ = ! (* full_case = 32'd1 *) (* src = "../core/common/multiplexer.sv:0.0-0.0" *) sel;
  assign \input_array[0]  = in_bus[255:224];
  assign \input_array[1]  = in_bus[223:192];
  assign \input_array[2]  = in_bus[191:160];
  assign \input_array[3]  = in_bus[159:128];
  assign \input_array[4]  = in_bus[127:96];
  assign \input_array[5]  = in_bus[95:64];
  assign \input_array[6]  = in_bus[63:32];
  assign \input_array[7]  = in_bus[31:0];
endmodule

(* dynports =  1  *)
(* hdlname = "\\register" *)
(* src = "../core/common/register.sv:9.1-29.10" *)
module \$paramod\register\WIDTH=32\INITIAL=4194304 (clock, reset, write_enable, next, value);
  (* src = "../core/common/register.sv:13.12-13.17" *)
  input clock;
  (* src = "../core/common/register.sv:16.24-16.28" *)
  input [31:0] next;
  (* src = "../core/common/register.sv:14.12-14.17" *)
  input reset;
  (* src = "../core/common/register.sv:18.30-18.35" *)
  output [31:0] value;
  reg [31:0] value = 32'd4194304;
  (* src = "../core/common/register.sv:15.12-15.24" *)
  input write_enable;
  (* \always_ff  = 32'd1 *)
  (* src = "../core/common/register.sv:25.4-27.45" *)
  always @(posedge clock, posedge reset)
    if (reset) value <= 32'd4194304;
    else if (write_enable) value <= next;
endmodule

(* src = "../core/common/alu.sv:9.1-82.10" *)
module alu(alu_function, operand_a, operand_b, result, result_equal_zero);
  (* src = "../core/common/alu.sv:0.0-0.0" *)
  wire [31:0] _00_;
  (* src = "../core/common/alu.sv:0.0-0.0" *)
  wire [31:0] _01_;
  (* src = "../core/common/alu.sv:0.0-0.0" *)
  wire [31:0] _02_;
  (* src = "../core/common/alu.sv:0.0-0.0" *)
  wire [31:0] _03_;
  (* src = "../core/common/alu.sv:0.0-0.0" *)
  wire [31:0] _04_;
  (* src = "../core/common/alu.sv:0.0-0.0" *)
  wire [31:0] _05_;
  (* src = "../core/common/alu.sv:28.34-28.58" *)
  wire [31:0] _06_;
  (* src = "../core/common/alu.sv:38.34-38.58" *)
  wire [31:0] _07_;
  wire _08_;
  (* src = "../core/common/alu.sv:50.30-50.51" *)
  wire [31:0] _09_;
  (* src = "../core/common/alu.sv:55.30-55.73" *)
  wire [31:0] _10_;
  (* src = "../core/common/alu.sv:33.42-33.64" *)
  wire _11_;
  (* src = "../core/common/alu.sv:45.21-45.39" *)
  wire _12_;
  (* src = "../core/common/alu.sv:47.27-47.52" *)
  wire _13_;
  (* src = "../core/common/alu.sv:47.58-47.76" *)
  wire _14_;
  (* src = "../core/common/alu.sv:47.26-47.77" *)
  wire _15_;
  (* src = "../core/common/alu.sv:34.42-34.63" *)
  wire _16_;
  (* src = "../core/common/alu.sv:35.41-35.84" *)
  wire _17_;
  (* src = "../core/common/alu.sv:62.30-62.51" *)
  wire [31:0] _18_;
  (* src = "../core/common/alu.sv:67.30-67.73" *)
  wire [31:0] _19_;
  (* src = "../core/common/alu.sv:37.35-37.59" *)
  wire [31:0] _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  (* src = "../core/common/alu.sv:30.34-30.63" *)
  wire [31:0] _40_;
  (* src = "../core/common/alu.sv:31.34-31.63" *)
  wire [31:0] _41_;
  (* src = "../core/common/alu.sv:32.34-32.63" *)
  wire [31:0] _42_;
  (* src = "../core/common/alu.sv:29.34-29.58" *)
  wire [31:0] _43_;
  (* src = "../core/common/alu.sv:36.34-36.58" *)
  wire [31:0] _44_;
  (* src = "../core/common/alu.sv:10.25-10.37" *)
  input [4:0] alu_function;
  (* src = "../core/common/alu.sv:11.25-11.34" *)
  input [31:0] operand_a;
  (* src = "../core/common/alu.sv:12.25-12.34" *)
  input [31:0] operand_b;
  (* src = "../core/common/alu.sv:13.25-13.31" *)
  output [31:0] result;
  (* src = "../core/common/alu.sv:14.25-14.42" *)
  output result_equal_zero;
  (* src = "../core/common/alu.sv:18.22-18.43" *)
  wire [63:0] signed_multiplication;
  (* src = "../core/common/alu.sv:20.22-20.52" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [63:0] signed_unsigned_multiplication;
  (* src = "../core/common/alu.sv:19.22-19.45" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [63:0] unsigned_multiplication;
  assign _06_ = $signed(operand_a) + (* src = "../core/common/alu.sv:28.34-28.58" *) $signed(operand_b);
  assign _07_ = $signed(operand_a) & (* src = "../core/common/alu.sv:38.34-38.58" *) $signed(operand_b);
  assign _08_ = | { _26_, _25_ };
  assign _09_ = $signed(operand_a) / (* src = "../core/common/alu.sv:50.30-50.51" *) $signed(operand_b);
  assign _10_ = operand_a / (* src = "../core/common/alu.sv:55.30-55.73" *) operand_b;
  assign result_equal_zero = ! (* src = "../core/common/alu.sv:23.33-23.48" *) result;
  assign _11_ = $signed(operand_a) == (* src = "../core/common/alu.sv:33.42-33.64" *) $signed(operand_b);
  assign _12_ = ! (* src = "../core/common/alu.sv:45.21-45.39" *) operand_b;
  assign _13_ = operand_a == (* src = "../core/common/alu.sv:47.27-47.52" *) 32'd2147483648;
  assign _14_ = operand_b == (* src = "../core/common/alu.sv:47.58-47.76" *) 32'd1;
  assign _15_ = _13_ && (* src = "../core/common/alu.sv:47.26-47.77" *) _14_;
  assign _16_ = $signed(operand_a) < (* src = "../core/common/alu.sv:34.42-34.63" *) $signed(operand_b);
  assign _17_ = operand_a < (* src = "../core/common/alu.sv:35.41-35.84" *) operand_b;
  assign _18_ = $signed(operand_a) % (* src = "../core/common/alu.sv:62.30-62.51" *) $signed(operand_b);
  assign _19_ = operand_a % (* src = "../core/common/alu.sv:67.30-67.73" *) operand_b;
  assign signed_multiplication = $signed(operand_a) * (* src = "../core/common/alu.sv:76.39-76.60" *) $signed(operand_b);
  assign unsigned_multiplication = { 32'h00000000, operand_a } * (* src = "../core/common/alu.sv:77.39-77.82" *) { 32'h00000000, operand_b };
  assign _20_ = $signed(operand_a) | (* src = "../core/common/alu.sv:37.35-37.59" *) $signed(operand_b);
  assign _05_ = _12_ ? (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:64.21-64.39|../core/common/alu.sv:64.17-67.74" *) operand_a : _19_;
  assign _21_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h13;
  assign _04_ = _15_ ? (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:59.26-59.77|../core/common/alu.sv:59.22-62.52" *) 32'd0 : _18_;
  assign _22_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h12;
  assign _03_ = _12_ ? (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:57.21-57.39|../core/common/alu.sv:57.17-62.52" *) operand_a : _04_;
  assign _02_ = _12_ ? (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:52.21-52.39|../core/common/alu.sv:52.17-55.74" *) 32'd1 : _10_;
  assign _23_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h11;
  assign _01_ = _15_ ? (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:47.26-47.77|../core/common/alu.sv:47.22-50.52" *) 32'd2147483648 : _09_;
  assign _24_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h10;
  assign _00_ = _12_ ? (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:45.21-45.39|../core/common/alu.sv:45.17-50.52" *) 32'd1 : _01_;
  function [31:0] _73_;
    input [31:0] a;
    input [575:0] b;
    input [17:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *)
    (* parallel_case *)
    casez (s)
      18'b?????????????????1:
        _73_ = b[31:0];
      18'b????????????????1?:
        _73_ = b[63:32];
      18'b???????????????1??:
        _73_ = b[95:64];
      18'b??????????????1???:
        _73_ = b[127:96];
      18'b?????????????1????:
        _73_ = b[159:128];
      18'b????????????1?????:
        _73_ = b[191:160];
      18'b???????????1??????:
        _73_ = b[223:192];
      18'b??????????1???????:
        _73_ = b[255:224];
      18'b?????????1????????:
        _73_ = b[287:256];
      18'b????????1?????????:
        _73_ = b[319:288];
      18'b???????1??????????:
        _73_ = b[351:320];
      18'b??????1???????????:
        _73_ = b[383:352];
      18'b?????1????????????:
        _73_ = b[415:384];
      18'b????1?????????????:
        _73_ = b[447:416];
      18'b???1??????????????:
        _73_ = b[479:448];
      18'b??1???????????????:
        _73_ = b[511:480];
      18'b?1????????????????:
        _73_ = b[543:512];
      18'b1?????????????????:
        _73_ = b[575:544];
      default:
        _73_ = a;
    endcase
  endfunction
  assign result = _73_(32'd0, { _06_, _43_, _40_, _41_, _42_, 31'h00000000, _11_, 31'h00000000, _16_, 31'h00000000, _17_, _44_, _20_, _07_, signed_multiplication[31:0], signed_multiplication[63:32], unsigned_multiplication[63:32], _00_, _02_, _03_, _05_ }, { _39_, _38_, _37_, _36_, _35_, _34_, _33_, _32_, _31_, _30_, _29_, _28_, _27_, _08_, _24_, _23_, _22_, _21_ });
  assign _25_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h0f;
  assign _26_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h0e;
  assign _27_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h0d;
  assign _28_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h0c;
  assign _29_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h0b;
  assign _30_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h0a;
  assign _31_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h09;
  assign _32_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h08;
  assign _33_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h07;
  assign _34_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h06;
  assign _35_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h05;
  assign _36_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h04;
  assign _37_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h03;
  assign _38_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h02;
  assign _39_ = alu_function == (* full_case = 32'd1 *) (* src = "../core/common/alu.sv:0.0-0.0|../core/common/alu.sv:27.9-71.16" *) 5'h01;
  assign _40_ = $signed(operand_a) << (* src = "../core/common/alu.sv:30.34-30.63" *) operand_b[4:0];
  assign _41_ = $signed(operand_a) >> (* src = "../core/common/alu.sv:31.34-31.63" *) operand_b[4:0];
  assign _42_ = $signed(operand_a) >>> (* src = "../core/common/alu.sv:32.34-32.63" *) operand_b[4:0];
  assign _43_ = $signed(operand_a) - (* src = "../core/common/alu.sv:29.34-29.58" *) $signed(operand_b);
  assign _44_ = $signed(operand_a) ^ (* src = "../core/common/alu.sv:36.34-36.58" *) $signed(operand_b);
  assign signed_unsigned_multiplication = unsigned_multiplication;
endmodule

(* src = "../core/common/alu_control.sv:9.1-92.10" *)
module alu_control(alu_op_type, inst_funct3, inst_funct7, alu_function);
  (* src = "../core/common/alu_control.sv:0.0-0.0" *)
  wire [4:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  (* src = "../core/common/alu_control.sv:42.31-42.56" *)
  wire _04_;
  (* src = "../core/common/alu_control.sv:42.13-42.56" *)
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  (* src = "../core/common/alu_control.sv:13.24-13.36" *)
  output [4:0] alu_function;
  (* src = "../core/common/alu_control.sv:10.24-10.35" *)
  input [1:0] alu_op_type;
  (* src = "../core/common/alu_control.sv:20.17-20.29" *)
  wire [4:0] branch_funct;
  (* src = "../core/common/alu_control.sv:16.17-16.30" *)
  wire [4:0] default_funct;
  (* src = "../core/common/alu_control.sv:11.24-11.35" *)
  input [2:0] inst_funct3;
  (* src = "../core/common/alu_control.sv:12.24-12.35" *)
  input [6:0] inst_funct7;
  (* src = "../core/common/alu_control.sv:22.17-22.34" *)
  wire [4:0] m_extension_funct;
  (* src = "../core/common/alu_control.sv:18.17-18.25" *)
  wire [4:0] op_funct;
  (* src = "../core/common/alu_control.sv:19.17-19.29" *)
  wire [4:0] op_imm_funct;
  (* src = "../core/common/alu_control.sv:17.17-17.32" *)
  wire [4:0] secondary_funct;
  assign _01_ = | { _07_, _06_ };
  assign _02_ = | { _09_, _08_ };
  assign _03_ = | { _13_, _12_ };
  assign _04_ = inst_funct3[1:0] == (* src = "../core/common/alu_control.sv:42.31-42.56" *) 2'h1;
  assign _05_ = inst_funct7[5] && (* src = "../core/common/alu_control.sv:42.13-42.56" *) _04_;
  function [4:0] _23_;
    input [4:0] a;
    input [39:0] b;
    input [7:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:79.13-89.20" *)
    (* parallel_case *)
    casez (s)
      8'b???????1:
        _23_ = b[4:0];
      8'b??????1?:
        _23_ = b[9:5];
      8'b?????1??:
        _23_ = b[14:10];
      8'b????1???:
        _23_ = b[19:15];
      8'b???1????:
        _23_ = b[24:20];
      8'b??1?????:
        _23_ = b[29:25];
      8'b?1??????:
        _23_ = b[34:30];
      8'b1???????:
        _23_ = b[39:35];
      default:
        _23_ = a;
    endcase
  endfunction
  assign m_extension_funct = _23_(5'hxx, 40'h635cf84653, { _13_, _12_, _11_, _10_, _09_, _08_, _07_, _06_ });
  assign _06_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:79.13-89.20" *) 3'h7;
  assign _07_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:79.13-89.20" *) 3'h6;
  assign _08_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:79.13-89.20" *) 3'h5;
  assign _09_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:79.13-89.20" *) 3'h4;
  assign _10_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:79.13-89.20" *) 3'h3;
  assign _11_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:79.13-89.20" *) 3'h2;
  assign _12_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:79.13-89.20" *) 3'h1;
  assign _13_ = ! (* full_case = 32'd1 *) (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:79.13-89.20" *) inst_funct3;
  function [4:0] _32_;
    input [4:0] a;
    input [14:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:67.9-75.16" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _32_ = b[4:0];
      3'b?1?:
        _32_ = b[9:5];
      3'b1??:
        _32_ = b[14:10];
      default:
        _32_ = a;
    endcase
  endfunction
  assign branch_funct = _32_(5'hxx, 15'h18e8, { _03_, _02_, _01_ });
  function [4:0] _33_;
    input [4:0] a;
    input [9:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:60.9-64.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _33_ = b[4:0];
      2'b1?:
        _33_ = b[9:5];
      default:
        _33_ = a;
    endcase
  endfunction
  assign secondary_funct = _33_(5'hxx, 10'h045, { _13_, _08_ });
  function [4:0] _34_;
    input [4:0] a;
    input [39:0] b;
    input [7:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:47.9-57.16" *)
    (* parallel_case *)
    casez (s)
      8'b???????1:
        _34_ = b[4:0];
      8'b??????1?:
        _34_ = b[9:5];
      8'b?????1??:
        _34_ = b[14:10];
      8'b????1???:
        _34_ = b[19:15];
      8'b???1????:
        _34_ = b[24:20];
      8'b??1?????:
        _34_ = b[29:25];
      8'b?1??????:
        _34_ = b[34:30];
      8'b1???????:
        _34_ = b[39:35];
      default:
        _34_ = a;
    endcase
  endfunction
  assign default_funct = _34_(5'hxx, 40'h08ce84914b, { _13_, _12_, _11_, _10_, _09_, _08_, _07_, _06_ });
  assign op_imm_funct = _05_ ? (* full_case = 32'd1 *) (* src = "../core/common/alu_control.sv:42.13-42.56|../core/common/alu_control.sv:42.9-44.46" *) secondary_funct : default_funct;
  assign _00_ = inst_funct7[0] ? (* full_case = 32'd1 *) (* src = "../core/common/alu_control.sv:37.17-37.31|../core/common/alu_control.sv:37.14-39.58" *) m_extension_funct : default_funct;
  assign op_funct = inst_funct7[5] ? (* full_case = 32'd1 *) (* src = "../core/common/alu_control.sv:35.13-35.27|../core/common/alu_control.sv:35.9-39.58" *) secondary_funct : _00_;
  function [4:0] _38_;
    input [4:0] a;
    input [19:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:26.9-32.16" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        _38_ = b[4:0];
      4'b??1?:
        _38_ = b[9:5];
      4'b?1??:
        _38_ = b[14:10];
      4'b1???:
        _38_ = b[19:15];
      default:
        _38_ = a;
    endcase
  endfunction
  assign alu_function = _38_(5'hxx, { 5'h01, op_funct, op_imm_funct, branch_funct }, { _17_, _16_, _15_, _14_ });
  assign _14_ = alu_op_type == (* full_case = 32'd1 *) (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:26.9-32.16" *) 2'h1;
  assign _15_ = alu_op_type == (* full_case = 32'd1 *) (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:26.9-32.16" *) 2'h3;
  assign _16_ = alu_op_type == (* full_case = 32'd1 *) (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:26.9-32.16" *) 2'h2;
  assign _17_ = ! (* full_case = 32'd1 *) (* src = "../core/common/alu_control.sv:0.0-0.0|../core/common/alu_control.sv:26.9-32.16" *) alu_op_type;
endmodule

(* src = "../core/common/control_transfer.sv:9.1-26.10" *)
module control_transfer(result_equal_zero, inst_funct3, take_branch);
  wire _00_;
  wire _01_;
  (* src = "../core/common/control_transfer.sv:17.36-17.54" *)
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  (* src = "../core/common/control_transfer.sv:11.18-11.29" *)
  input [2:0] inst_funct3;
  (* src = "../core/common/control_transfer.sv:10.12-10.29" *)
  input result_equal_zero;
  (* src = "../core/common/control_transfer.sv:12.18-12.29" *)
  output take_branch;
  assign _00_ = | { _07_, _05_, _03_ };
  assign _01_ = | { _08_, _06_, _04_ };
  assign _02_ = ! (* src = "../core/common/control_transfer.sv:17.36-17.54" *) result_equal_zero;
  function [0:0] _12_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/common/control_transfer.sv:0.0-0.0|../core/common/control_transfer.sv:16.9-24.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _12_ = b[0:0];
      2'b1?:
        _12_ = b[1:1];
      default:
        _12_ = a;
    endcase
  endfunction
  assign take_branch = _12_(1'hx, { _02_, result_equal_zero }, { _01_, _00_ });
  assign _03_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "../core/common/control_transfer.sv:0.0-0.0|../core/common/control_transfer.sv:16.9-24.16" *) 3'h7;
  assign _04_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "../core/common/control_transfer.sv:0.0-0.0|../core/common/control_transfer.sv:16.9-24.16" *) 3'h6;
  assign _05_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "../core/common/control_transfer.sv:0.0-0.0|../core/common/control_transfer.sv:16.9-24.16" *) 3'h5;
  assign _06_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "../core/common/control_transfer.sv:0.0-0.0|../core/common/control_transfer.sv:16.9-24.16" *) 3'h4;
  assign _07_ = inst_funct3 == (* full_case = 32'd1 *) (* src = "../core/common/control_transfer.sv:0.0-0.0|../core/common/control_transfer.sv:16.9-24.16" *) 3'h1;
  assign _08_ = ! (* full_case = 32'd1 *) (* src = "../core/common/control_transfer.sv:0.0-0.0|../core/common/control_transfer.sv:16.9-24.16" *) inst_funct3;
endmodule

(* src = "../core/common/data_memory_interface.sv:9.1-62.10" *)
module data_memory_interface(clock, read_enable, write_enable, data_format, address, write_data, read_data, bus_address, bus_read_data, bus_write_data, bus_byte_enable, bus_read_enable, bus_write_enable);
  (* src = "../core/common/data_memory_interface.sv:53.37-53.70" *)
  wire _00_;
  (* src = "../core/common/data_memory_interface.sv:54.37-54.71" *)
  wire _01_;
  (* src = "../core/common/data_memory_interface.sv:53.37-53.52" *)
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  (* src = "../core/common/data_memory_interface.sv:38.39-38.62" *)
  wire [3:0] _06_;
  (* src = "../core/common/data_memory_interface.sv:39.39-39.62" *)
  wire [3:0] _07_;
  (* src = "../core/common/data_memory_interface.sv:40.39-40.62" *)
  wire [3:0] _08_;
  (* src = "../core/common/data_memory_interface.sv:14.19-14.26" *)
  input [31:0] address;
  (* src = "../core/common/data_memory_interface.sv:18.25-18.36" *)
  output [31:0] bus_address;
  (* src = "../core/common/data_memory_interface.sv:21.25-21.40" *)
  output [3:0] bus_byte_enable;
  (* src = "../core/common/data_memory_interface.sv:19.25-19.38" *)
  input [31:0] bus_read_data;
  (* src = "../core/common/data_memory_interface.sv:22.25-22.40" *)
  output bus_read_enable;
  (* src = "../core/common/data_memory_interface.sv:20.25-20.39" *)
  output [31:0] bus_write_data;
  (* src = "../core/common/data_memory_interface.sv:23.25-23.41" *)
  output bus_write_enable;
  (* src = "../core/common/data_memory_interface.sv:10.12-10.17" *)
  input clock;
  (* src = "../core/common/data_memory_interface.sv:13.19-13.30" *)
  input [2:0] data_format;
  (* src = "../core/common/data_memory_interface.sv:26.18-26.30" *)
  wire [31:0] position_fix;
  (* src = "../core/common/data_memory_interface.sv:16.19-16.28" *)
  output [31:0] read_data;
  (* src = "../core/common/data_memory_interface.sv:11.12-11.23" *)
  input read_enable;
  (* src = "../core/common/data_memory_interface.sv:27.18-27.26" *)
  wire [31:0] sign_fix;
  (* src = "../core/common/data_memory_interface.sv:15.19-15.29" *)
  input [31:0] write_data;
  (* src = "../core/common/data_memory_interface.sv:12.12-12.24" *)
  input write_enable;
  assign _00_ = _02_ & (* src = "../core/common/data_memory_interface.sv:53.37-53.70" *) position_fix[7];
  assign _01_ = _02_ & (* src = "../core/common/data_memory_interface.sv:54.37-54.71" *) position_fix[15];
  assign _02_ = ~ (* src = "../core/common/data_memory_interface.sv:53.37-53.52" *) data_format[2];
  function [31:0] _12_;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/common/data_memory_interface.sv:0.0-0.0|../core/common/data_memory_interface.sv:52.8-57.15" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _12_ = b[31:0];
      3'b?1?:
        _12_ = b[63:32];
      3'b1??:
        _12_ = b[95:64];
      default:
        _12_ = a;
    endcase
  endfunction
  assign read_data = _12_(32'hxxxxxxxx, { _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, _00_, position_fix[7:0], _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, _01_, position_fix[15:0], position_fix }, { _05_, _04_, _03_ });
  assign _03_ = data_format[1:0] == (* full_case = 32'd1 *) (* src = "../core/common/data_memory_interface.sv:0.0-0.0|../core/common/data_memory_interface.sv:52.8-57.15" *) 2'h2;
  assign _04_ = data_format[1:0] == (* full_case = 32'd1 *) (* src = "../core/common/data_memory_interface.sv:0.0-0.0|../core/common/data_memory_interface.sv:52.8-57.15" *) 2'h1;
  assign _05_ = ! (* full_case = 32'd1 *) (* src = "../core/common/data_memory_interface.sv:0.0-0.0|../core/common/data_memory_interface.sv:52.8-57.15" *) data_format[1:0];
  function [3:0] _16_;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/common/data_memory_interface.sv:0.0-0.0|../core/common/data_memory_interface.sv:37.8-42.15" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _16_ = b[3:0];
      3'b?1?:
        _16_ = b[7:4];
      3'b1??:
        _16_ = b[11:8];
      default:
        _16_ = a;
    endcase
  endfunction
  assign bus_byte_enable = _16_(4'h0, { _06_, _07_, _08_ }, { _05_, _04_, _03_ });
  assign bus_write_data = write_data << (* src = "../core/common/data_memory_interface.sv:32.31-32.61" *) { 27'h0000000, address[1:0], 3'h0 };
  assign _06_ = 4'h1 << (* src = "../core/common/data_memory_interface.sv:38.39-38.62" *) address[1:0];
  assign _07_ = 4'h3 << (* src = "../core/common/data_memory_interface.sv:39.39-39.62" *) address[1:0];
  assign _08_ = 4'hf << (* src = "../core/common/data_memory_interface.sv:40.39-40.62" *) address[1:0];
  assign position_fix = bus_read_data >> (* src = "../core/common/data_memory_interface.sv:47.23-47.56" *) { 27'h0000000, address[1:0], 3'h0 };
  assign bus_address = address;
  assign bus_read_enable = read_enable;
  assign bus_write_enable = write_enable;
  assign sign_fix = read_data;
endmodule

(* src = "../core/common/immediate_generator.sv:9.1-44.10" *)
module immediate_generator(inst, immediate);
  wire _00_;
  wire [1:0] _01_;
  wire _02_;
  wire _03_;
  wire [1:0] _04_;
  wire _05_;
  wire [3:0] _06_;
  wire _07_;
  (* src = "../core/common/immediate_generator.sv:11.25-11.34" *)
  output [31:0] immediate;
  (* src = "../core/common/immediate_generator.sv:10.25-10.29" *)
  input [31:0] inst;
  function [31:0] _08_;
    input [31:0] a;
    input [159:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/common/immediate_generator.sv:0.0-0.0|../core/common/immediate_generator.sv:24.9-41.16" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        _08_ = b[31:0];
      5'b???1?:
        _08_ = b[63:32];
      5'b??1??:
        _08_ = b[95:64];
      5'b?1???:
        _08_ = b[127:96];
      5'b1????:
        _08_ = b[159:128];
      default:
        _08_ = a;
    endcase
  endfunction
  assign immediate = _08_(32'd0, { inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31:20], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31:25], inst[11:7], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[7], inst[30:25], inst[11:8], 1'h0, inst[31:12], 12'h000, inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[31], inst[19:12], inst[20], inst[30:21], 1'h0 }, { _07_, _05_, _03_, _02_, _00_ });
  assign _00_ = inst[6:0] == (* full_case = 32'd1 *) (* src = "../core/common/immediate_generator.sv:0.0-0.0|../core/common/immediate_generator.sv:24.9-41.16" *) 7'h6f;
  assign _02_ = | (* full_case = 32'd1 *) (* src = "../core/common/immediate_generator.sv:0.0-0.0|../core/common/immediate_generator.sv:24.9-41.16" *) _01_;
  assign _01_[0] = inst[6:0] == (* full_case = 32'd1 *) (* src = "../core/common/immediate_generator.sv:0.0-0.0|../core/common/immediate_generator.sv:24.9-41.16" *) 7'h17;
  assign _01_[1] = inst[6:0] == (* full_case = 32'd1 *) (* src = "../core/common/immediate_generator.sv:0.0-0.0|../core/common/immediate_generator.sv:24.9-41.16" *) 7'h37;
  assign _03_ = inst[6:0] == (* full_case = 32'd1 *) (* src = "../core/common/immediate_generator.sv:0.0-0.0|../core/common/immediate_generator.sv:24.9-41.16" *) 7'h63;
  assign _05_ = | (* full_case = 32'd1 *) (* src = "../core/common/immediate_generator.sv:0.0-0.0|../core/common/immediate_generator.sv:24.9-41.16" *) _04_;
  assign _04_[0] = inst[6:0] == (* full_case = 32'd1 *) (* src = "../core/common/immediate_generator.sv:0.0-0.0|../core/common/immediate_generator.sv:24.9-41.16" *) 7'h27;
  assign _04_[1] = inst[6:0] == (* full_case = 32'd1 *) (* src = "../core/common/immediate_generator.sv:0.0-0.0|../core/common/immediate_generator.sv:24.9-41.16" *) 7'h23;
  assign _07_ = | (* full_case = 32'd1 *) (* src = "../core/common/immediate_generator.sv:0.0-0.0|../core/common/immediate_generator.sv:24.9-41.16" *) _06_;
  assign _06_[0] = inst[6:0] == (* full_case = 32'd1 *) (* src = "../core/common/immediate_generator.sv:0.0-0.0|../core/common/immediate_generator.sv:24.9-41.16" *) 7'h03;
  assign _06_[1] = inst[6:0] == (* full_case = 32'd1 *) (* src = "../core/common/immediate_generator.sv:0.0-0.0|../core/common/immediate_generator.sv:24.9-41.16" *) 7'h07;
  assign _06_[2] = inst[6:0] == (* full_case = 32'd1 *) (* src = "../core/common/immediate_generator.sv:0.0-0.0|../core/common/immediate_generator.sv:24.9-41.16" *) 7'h13;
  assign _06_[3] = inst[6:0] == (* full_case = 32'd1 *) (* src = "../core/common/immediate_generator.sv:0.0-0.0|../core/common/immediate_generator.sv:24.9-41.16" *) 7'h67;
endmodule

(* src = "../core/common/instruction_decoder.sv:9.1-26.10" *)
module instruction_decoder(inst, inst_opcode, inst_funct3, inst_funct7, inst_rd, inst_rs1, inst_rs2);
  (* src = "../core/common/instruction_decoder.sv:10.18-10.22" *)
  input [31:0] inst;
  (* src = "../core/common/instruction_decoder.sv:12.18-12.29" *)
  output [2:0] inst_funct3;
  (* src = "../core/common/instruction_decoder.sv:13.18-13.29" *)
  output [6:0] inst_funct7;
  (* src = "../core/common/instruction_decoder.sv:11.18-11.29" *)
  output [6:0] inst_opcode;
  (* src = "../core/common/instruction_decoder.sv:14.18-14.25" *)
  output [4:0] inst_rd;
  (* src = "../core/common/instruction_decoder.sv:15.18-15.26" *)
  output [4:0] inst_rs1;
  (* src = "../core/common/instruction_decoder.sv:16.18-16.26" *)
  output [4:0] inst_rs2;
  assign inst_funct3 = inst[14:12];
  assign inst_funct7 = inst[31:25];
  assign inst_opcode = inst[6:0];
  assign inst_rd = inst[11:7];
  assign inst_rs1 = inst[19:15];
  assign inst_rs2 = inst[24:20];
endmodule

(* src = "../core/common/regfile.sv:9.1-32.10" *)
module regfile(clock, write_enable, rd_address, rs1_address, rs2_address, rd_data, rs1_data, rs2_data);
  (* src = "../core/common/regfile.sv:28.5-30.69" *)
  wire [4:0] _000_;
  (* src = "../core/common/regfile.sv:28.5-30.69" *)
  wire [31:0] _001_;
  (* src = "../core/common/regfile.sv:28.5-30.69" *)
  wire [31:0] _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  (* src = "../core/common/regfile.sv:24.23-24.42" *)
  wire _056_;
  (* src = "../core/common/regfile.sv:25.23-25.42" *)
  wire _057_;
  wire [31:0] _058_;
  wire [31:0] _059_;
  wire [31:0] _060_;
  wire [31:0] _061_;
  wire [31:0] _062_;
  wire [31:0] _063_;
  wire [31:0] _064_;
  wire [31:0] _065_;
  wire [31:0] _066_;
  wire [31:0] _067_;
  wire [31:0] _068_;
  wire [31:0] _069_;
  wire [31:0] _070_;
  wire [31:0] _071_;
  wire [31:0] _072_;
  wire [31:0] _073_;
  wire [31:0] _074_;
  wire [31:0] _075_;
  wire [31:0] _076_;
  wire [31:0] _077_;
  wire [31:0] _078_;
  wire [31:0] _079_;
  wire [31:0] _080_;
  wire [31:0] _081_;
  wire [31:0] _082_;
  wire [31:0] _083_;
  wire [31:0] _084_;
  wire [31:0] _085_;
  wire [31:0] _086_;
  wire [31:0] _087_;
  wire [31:0] _088_;
  wire [31:0] _089_;
  wire [31:0] _090_;
  wire [31:0] _091_;
  wire [31:0] _092_;
  wire [31:0] _093_;
  wire [31:0] _094_;
  wire [31:0] _095_;
  wire [31:0] _096_;
  wire [31:0] _097_;
  wire [31:0] _098_;
  wire [31:0] _099_;
  wire [31:0] _100_;
  wire [31:0] _101_;
  wire [31:0] _102_;
  wire [31:0] _103_;
  wire [31:0] _104_;
  wire [31:0] _105_;
  wire [31:0] _106_;
  wire [31:0] _107_;
  wire [31:0] _108_;
  wire [31:0] _109_;
  wire [31:0] _110_;
  wire [31:0] _111_;
  wire [31:0] _112_;
  wire [31:0] _113_;
  wire [31:0] _114_;
  wire [31:0] _115_;
  wire [31:0] _116_;
  wire [31:0] _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  (* src = "../core/common/regfile.sv:24.53-24.61" *)
  wire [31:0] _150_;
  (* src = "../core/common/regfile.sv:25.53-25.61" *)
  wire [31:0] _151_;
  (* src = "../core/common/regfile.sv:30.17-30.35" *)
  wire _152_;
  wire [31:0] _153_;
  wire [31:0] _154_;
  wire [4:0] _155_;
  (* src = "../core/common/regfile.sv:10.12-10.17" *)
  input clock;
  (* src = "../core/common/regfile.sv:12.18-12.28" *)
  input [4:0] rd_address;
  (* src = "../core/common/regfile.sv:15.19-15.26" *)
  input [31:0] rd_data;
  reg [31:0] \register[0] ;
  reg [31:0] \register[10] ;
  reg [31:0] \register[11] ;
  reg [31:0] \register[12] ;
  reg [31:0] \register[13] ;
  reg [31:0] \register[14] ;
  reg [31:0] \register[15] ;
  reg [31:0] \register[16] ;
  reg [31:0] \register[17] ;
  reg [31:0] \register[18] ;
  reg [31:0] \register[19] ;
  reg [31:0] \register[1] ;
  reg [31:0] \register[20] ;
  reg [31:0] \register[21] ;
  reg [31:0] \register[22] ;
  reg [31:0] \register[23] ;
  reg [31:0] \register[24] ;
  reg [31:0] \register[25] ;
  reg [31:0] \register[26] ;
  reg [31:0] \register[27] ;
  reg [31:0] \register[28] ;
  reg [31:0] \register[29] ;
  reg [31:0] \register[2] ;
  reg [31:0] \register[30] ;
  reg [31:0] \register[31] ;
  reg [31:0] \register[3] ;
  reg [31:0] \register[4] ;
  reg [31:0] \register[5] ;
  reg [31:0] \register[6] ;
  reg [31:0] \register[7] ;
  reg [31:0] \register[8] ;
  reg [31:0] \register[9] ;
  (* src = "../core/common/regfile.sv:13.18-13.29" *)
  input [4:0] rs1_address;
  (* src = "../core/common/regfile.sv:16.19-16.27" *)
  output [31:0] rs1_data;
  (* src = "../core/common/regfile.sv:14.18-14.29" *)
  input [4:0] rs2_address;
  (* src = "../core/common/regfile.sv:17.19-17.27" *)
  output [31:0] rs2_data;
  (* src = "../core/common/regfile.sv:11.12-11.24" *)
  input write_enable;
  assign _051_ = ~ _000_[0];
  assign _052_ = ~ _000_[1];
  assign _053_ = ~ _000_[2];
  assign _054_ = ~ _000_[3];
  assign _055_ = ~ _000_[4];
  assign _003_ = _051_ & _052_;
  assign _004_ = _054_ & _055_;
  assign _005_ = _053_ & _004_;
  assign _006_ = _003_ & _005_;
  assign _007_ = _000_[0] & _052_;
  assign _008_ = _007_ & _005_;
  assign _009_ = _051_ & _000_[1];
  assign _010_ = _009_ & _005_;
  assign _011_ = _000_[0] & _000_[1];
  assign _012_ = _011_ & _005_;
  assign _013_ = _000_[2] & _004_;
  assign _014_ = _003_ & _013_;
  assign _015_ = _007_ & _013_;
  assign _016_ = _009_ & _013_;
  assign _017_ = _011_ & _013_;
  assign _018_ = _000_[3] & _055_;
  assign _019_ = _053_ & _018_;
  assign _020_ = _003_ & _019_;
  assign _021_ = _007_ & _019_;
  assign _022_ = _009_ & _019_;
  assign _023_ = _011_ & _019_;
  assign _024_ = _000_[2] & _018_;
  assign _025_ = _003_ & _024_;
  assign _026_ = _007_ & _024_;
  assign _027_ = _009_ & _024_;
  assign _028_ = _011_ & _024_;
  assign _029_ = _054_ & _000_[4];
  assign _030_ = _053_ & _029_;
  assign _031_ = _003_ & _030_;
  assign _032_ = _007_ & _030_;
  assign _033_ = _009_ & _030_;
  assign _034_ = _011_ & _030_;
  assign _035_ = _000_[2] & _029_;
  assign _036_ = _003_ & _035_;
  assign _037_ = _007_ & _035_;
  assign _038_ = _009_ & _035_;
  assign _039_ = _011_ & _035_;
  assign _040_ = _000_[3] & _000_[4];
  assign _041_ = _053_ & _040_;
  assign _042_ = _003_ & _041_;
  assign _043_ = _007_ & _041_;
  assign _044_ = _009_ & _041_;
  assign _045_ = _011_ & _041_;
  assign _046_ = _000_[2] & _040_;
  assign _047_ = _003_ & _046_;
  assign _048_ = _007_ & _046_;
  assign _049_ = _009_ & _046_;
  assign _050_ = _011_ & _046_;
  always @(posedge clock)
    if (_149_) \register[9]  <= _001_;
  always @(posedge clock)
    if (_148_) \register[8]  <= _001_;
  always @(posedge clock)
    if (_147_) \register[7]  <= _001_;
  always @(posedge clock)
    if (_146_) \register[6]  <= _001_;
  always @(posedge clock)
    if (_145_) \register[5]  <= _001_;
  always @(posedge clock)
    if (_144_) \register[4]  <= _001_;
  always @(posedge clock)
    if (_143_) \register[3]  <= _001_;
  always @(posedge clock)
    if (_142_) \register[31]  <= _001_;
  always @(posedge clock)
    if (_141_) \register[30]  <= _001_;
  always @(posedge clock)
    if (_140_) \register[2]  <= _001_;
  always @(posedge clock)
    if (_139_) \register[29]  <= _001_;
  always @(posedge clock)
    if (_138_) \register[28]  <= _001_;
  always @(posedge clock)
    if (_137_) \register[27]  <= _001_;
  always @(posedge clock)
    if (_136_) \register[26]  <= _001_;
  always @(posedge clock)
    if (_135_) \register[25]  <= _001_;
  always @(posedge clock)
    if (_134_) \register[24]  <= _001_;
  always @(posedge clock)
    if (_133_) \register[23]  <= _001_;
  always @(posedge clock)
    if (_132_) \register[22]  <= _001_;
  always @(posedge clock)
    if (_131_) \register[21]  <= _001_;
  always @(posedge clock)
    if (_130_) \register[20]  <= _001_;
  always @(posedge clock)
    if (_129_) \register[1]  <= _001_;
  always @(posedge clock)
    if (_128_) \register[19]  <= _001_;
  always @(posedge clock)
    if (_127_) \register[18]  <= _001_;
  always @(posedge clock)
    if (_126_) \register[17]  <= _001_;
  always @(posedge clock)
    if (_125_) \register[16]  <= _001_;
  always @(posedge clock)
    if (_124_) \register[15]  <= _001_;
  always @(posedge clock)
    if (_123_) \register[14]  <= _001_;
  always @(posedge clock)
    if (_122_) \register[13]  <= _001_;
  always @(posedge clock)
    if (_121_) \register[12]  <= _001_;
  always @(posedge clock)
    if (_120_) \register[11]  <= _001_;
  always @(posedge clock)
    if (_119_) \register[10]  <= _001_;
  always @(posedge clock)
    if (_118_) \register[0]  <= _001_;
  assign _056_ = ! (* src = "../core/common/regfile.sv:24.23-24.42" *) rs1_address;
  assign _057_ = ! (* src = "../core/common/regfile.sv:25.23-25.42" *) rs2_address;
  assign _150_ = rs1_address[4] ? _059_ : _058_;
  assign _058_ = rs1_address[3] ? _061_ : _060_;
  assign _059_ = rs1_address[3] ? _063_ : _062_;
  assign _060_ = rs1_address[2] ? _065_ : _064_;
  assign _061_ = rs1_address[2] ? _067_ : _066_;
  assign _062_ = rs1_address[2] ? _069_ : _068_;
  assign _063_ = rs1_address[2] ? _071_ : _070_;
  assign _064_ = rs1_address[1] ? _073_ : _072_;
  assign _065_ = rs1_address[1] ? _075_ : _074_;
  assign _066_ = rs1_address[1] ? _077_ : _076_;
  assign _067_ = rs1_address[1] ? _079_ : _078_;
  assign _068_ = rs1_address[1] ? _081_ : _080_;
  assign _069_ = rs1_address[1] ? _083_ : _082_;
  assign _070_ = rs1_address[1] ? _085_ : _084_;
  assign _071_ = rs1_address[1] ? _087_ : _086_;
  assign _072_ = rs1_address[0] ? \register[1]  : \register[0] ;
  assign _082_ = rs1_address[0] ? \register[21]  : \register[20] ;
  assign _083_ = rs1_address[0] ? \register[23]  : \register[22] ;
  assign _084_ = rs1_address[0] ? \register[25]  : \register[24] ;
  assign _085_ = rs1_address[0] ? \register[27]  : \register[26] ;
  assign _086_ = rs1_address[0] ? \register[29]  : \register[28] ;
  assign _087_ = rs1_address[0] ? \register[31]  : \register[30] ;
  assign _073_ = rs1_address[0] ? \register[3]  : \register[2] ;
  assign _074_ = rs1_address[0] ? \register[5]  : \register[4] ;
  assign _075_ = rs1_address[0] ? \register[7]  : \register[6] ;
  assign _076_ = rs1_address[0] ? \register[9]  : \register[8] ;
  assign _077_ = rs1_address[0] ? \register[11]  : \register[10] ;
  assign _078_ = rs1_address[0] ? \register[13]  : \register[12] ;
  assign _079_ = rs1_address[0] ? \register[15]  : \register[14] ;
  assign _080_ = rs1_address[0] ? \register[17]  : \register[16] ;
  assign _081_ = rs1_address[0] ? \register[19]  : \register[18] ;
  assign _151_ = rs2_address[4] ? _089_ : _088_;
  assign _088_ = rs2_address[3] ? _091_ : _090_;
  assign _089_ = rs2_address[3] ? _093_ : _092_;
  assign _090_ = rs2_address[2] ? _095_ : _094_;
  assign _091_ = rs2_address[2] ? _097_ : _096_;
  assign _092_ = rs2_address[2] ? _099_ : _098_;
  assign _093_ = rs2_address[2] ? _101_ : _100_;
  assign _094_ = rs2_address[1] ? _103_ : _102_;
  assign _095_ = rs2_address[1] ? _105_ : _104_;
  assign _096_ = rs2_address[1] ? _107_ : _106_;
  assign _097_ = rs2_address[1] ? _109_ : _108_;
  assign _098_ = rs2_address[1] ? _111_ : _110_;
  assign _099_ = rs2_address[1] ? _113_ : _112_;
  assign _100_ = rs2_address[1] ? _115_ : _114_;
  assign _101_ = rs2_address[1] ? _117_ : _116_;
  assign _102_ = rs2_address[0] ? \register[1]  : \register[0] ;
  assign _112_ = rs2_address[0] ? \register[21]  : \register[20] ;
  assign _113_ = rs2_address[0] ? \register[23]  : \register[22] ;
  assign _114_ = rs2_address[0] ? \register[25]  : \register[24] ;
  assign _115_ = rs2_address[0] ? \register[27]  : \register[26] ;
  assign _116_ = rs2_address[0] ? \register[29]  : \register[28] ;
  assign _117_ = rs2_address[0] ? \register[31]  : \register[30] ;
  assign _103_ = rs2_address[0] ? \register[3]  : \register[2] ;
  assign _104_ = rs2_address[0] ? \register[5]  : \register[4] ;
  assign _105_ = rs2_address[0] ? \register[7]  : \register[6] ;
  assign _106_ = rs2_address[0] ? \register[9]  : \register[8] ;
  assign _107_ = rs2_address[0] ? \register[11]  : \register[10] ;
  assign _108_ = rs2_address[0] ? \register[13]  : \register[12] ;
  assign _109_ = rs2_address[0] ? \register[15]  : \register[14] ;
  assign _110_ = rs2_address[0] ? \register[17]  : \register[16] ;
  assign _111_ = rs2_address[0] ? \register[19]  : \register[18] ;
  assign _118_ = _006_ & _002_[31];
  assign _119_ = _022_ & _002_[31];
  assign _120_ = _023_ & _002_[31];
  assign _121_ = _025_ & _002_[31];
  assign _122_ = _026_ & _002_[31];
  assign _123_ = _027_ & _002_[31];
  assign _124_ = _028_ & _002_[31];
  assign _125_ = _031_ & _002_[31];
  assign _126_ = _032_ & _002_[31];
  assign _127_ = _033_ & _002_[31];
  assign _128_ = _034_ & _002_[31];
  assign _129_ = _008_ & _002_[31];
  assign _130_ = _036_ & _002_[31];
  assign _131_ = _037_ & _002_[31];
  assign _132_ = _038_ & _002_[31];
  assign _133_ = _039_ & _002_[31];
  assign _134_ = _042_ & _002_[31];
  assign _135_ = _043_ & _002_[31];
  assign _136_ = _044_ & _002_[31];
  assign _137_ = _045_ & _002_[31];
  assign _138_ = _047_ & _002_[31];
  assign _139_ = _048_ & _002_[31];
  assign _140_ = _010_ & _002_[31];
  assign _141_ = _049_ & _002_[31];
  assign _142_ = _050_ & _002_[31];
  assign _143_ = _012_ & _002_[31];
  assign _144_ = _014_ & _002_[31];
  assign _145_ = _015_ & _002_[31];
  assign _146_ = _016_ & _002_[31];
  assign _147_ = _017_ & _002_[31];
  assign _148_ = _020_ & _002_[31];
  assign _149_ = _021_ & _002_[31];
  assign _152_ = | (* src = "../core/common/regfile.sv:30.17-30.35" *) rd_address;
  assign _153_[31] = _152_ ? (* src = "../core/common/regfile.sv:30.17-30.35|../core/common/regfile.sv:30.13-30.69" *) 1'h1 : 1'h0;
  assign _002_[31] = write_enable ? (* src = "../core/common/regfile.sv:29.13-29.25|../core/common/regfile.sv:29.9-30.69" *) _153_[31] : 1'h0;
  assign _154_ = _152_ ? (* src = "../core/common/regfile.sv:30.17-30.35|../core/common/regfile.sv:30.13-30.69" *) rd_data : 32'hxxxxxxxx;
  assign _001_ = write_enable ? (* src = "../core/common/regfile.sv:29.13-29.25|../core/common/regfile.sv:29.9-30.69" *) _154_ : 32'hxxxxxxxx;
  assign _155_ = _152_ ? (* src = "../core/common/regfile.sv:30.17-30.35|../core/common/regfile.sv:30.13-30.69" *) rd_address : 5'hxx;
  assign _000_ = write_enable ? (* src = "../core/common/regfile.sv:29.13-29.25|../core/common/regfile.sv:29.9-30.69" *) _155_ : 5'hxx;
  assign rs1_data = _056_ ? (* src = "../core/common/regfile.sv:24.23-24.74" *) 32'd0 : _150_;
  assign rs2_data = _057_ ? (* src = "../core/common/regfile.sv:25.23-25.74" *) 32'd0 : _151_;
  assign _002_[30:0] = { _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31], _002_[31] };
  assign _153_[30:0] = { _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31], _153_[31] };
endmodule

(* top =  1  *)
(* src = "../core/singlecycle/riscv_core.sv:9.1-94.10" *)
module riscv_core(clock, reset, bus_address, bus_read_data, bus_write_data, bus_byte_enable, bus_read_enable, bus_write_enable, inst, pc);
  (* src = "../core/singlecycle/riscv_core.sv:37.18-37.25" *)
  wire [31:0] address;
  (* src = "../core/singlecycle/riscv_core.sv:33.17-33.29" *)
  wire [4:0] alu_function;
  (* src = "../core/singlecycle/riscv_core.sv:26.11-26.31" *)
  wire alu_operand_a_select;
  (* src = "../core/singlecycle/riscv_core.sv:27.11-27.31" *)
  wire alu_operand_b_select;
  (* src = "../core/singlecycle/riscv_core.sv:34.11-34.32" *)
  wire alu_result_equal_zero;
  (* src = "../core/singlecycle/riscv_core.sv:13.19-13.30" *)
  output [31:0] bus_address;
  (* src = "../core/singlecycle/riscv_core.sv:16.19-16.34" *)
  output [3:0] bus_byte_enable;
  (* src = "../core/singlecycle/riscv_core.sv:14.19-14.32" *)
  input [31:0] bus_read_data;
  (* src = "../core/singlecycle/riscv_core.sv:17.19-17.34" *)
  output bus_read_enable;
  (* src = "../core/singlecycle/riscv_core.sv:15.19-15.33" *)
  output [31:0] bus_write_data;
  (* src = "../core/singlecycle/riscv_core.sv:18.19-18.35" *)
  output bus_write_enable;
  (* src = "../core/singlecycle/riscv_core.sv:10.12-10.17" *)
  input clock;
  (* src = "../core/singlecycle/riscv_core.sv:20.19-20.23" *)
  input [31:0] inst;
  (* src = "../core/singlecycle/riscv_core.sv:30.17-30.28" *)
  wire [2:0] inst_funct3;
  (* src = "../core/singlecycle/riscv_core.sv:31.17-31.28" *)
  wire [6:0] inst_funct7;
  (* src = "../core/singlecycle/riscv_core.sv:29.17-29.28" *)
  wire [6:0] inst_opcode;
  (* src = "../core/singlecycle/riscv_core.sv:32.17-32.31" *)
  wire [1:0] next_pc_select;
  (* src = "../core/singlecycle/riscv_core.sv:21.19-21.21" *)
  output [31:0] pc;
  (* src = "../core/singlecycle/riscv_core.sv:24.11-24.26" *)
  wire pc_write_enable;
  (* src = "../core/singlecycle/riscv_core.sv:35.18-35.27" *)
  wire [31:0] read_data;
  (* src = "../core/singlecycle/riscv_core.sv:38.11-38.22" *)
  wire read_enable;
  (* src = "../core/singlecycle/riscv_core.sv:28.17-28.37" *)
  wire [2:0] reg_writeback_select;
  (* src = "../core/singlecycle/riscv_core.sv:25.11-25.31" *)
  wire regfile_write_enable;
  (* src = "../core/singlecycle/riscv_core.sv:11.12-11.17" *)
  input reset;
  (* src = "../core/singlecycle/riscv_core.sv:36.18-36.28" *)
  wire [31:0] write_data;
  (* src = "../core/singlecycle/riscv_core.sv:39.11-39.23" *)
  wire write_enable;
  (* module_not_derived = 32'd1 *)
  (* src = "../core/singlecycle/riscv_core.sv:78.27-92.6" *)
  data_memory_interface data_memory_interface (
    .address(address),
    .bus_address(bus_address),
    .bus_byte_enable(bus_byte_enable),
    .bus_read_data(bus_read_data),
    .bus_read_enable(bus_read_enable),
    .bus_write_data(bus_write_data),
    .bus_write_enable(bus_write_enable),
    .clock(clock),
    .data_format(inst_funct3),
    .read_data(read_data),
    .read_enable(read_enable),
    .write_data(write_data),
    .write_enable(write_enable)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "../core/singlecycle/riscv_core.sv:62.25-76.6" *)
  singlecycle_ctlpath singlecycle_ctlpath (
    .alu_function(alu_function),
    .alu_operand_a_select(alu_operand_a_select),
    .alu_operand_b_select(alu_operand_b_select),
    .alu_result_equal_zero(alu_result_equal_zero),
    .data_mem_read_enable(read_enable),
    .data_mem_write_enable(write_enable),
    .inst_funct3(inst_funct3),
    .inst_funct7(inst_funct7),
    .inst_opcode(inst_opcode),
    .next_pc_select(next_pc_select),
    .pc_write_enable(pc_write_enable),
    .reg_writeback_select(reg_writeback_select),
    .regfile_write_enable(regfile_write_enable)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "../core/singlecycle/riscv_core.sv:41.26-60.6" *)
  singlecycle_datapath singlecycle_datapath (
    .alu_function(alu_function),
    .alu_operand_a_select(alu_operand_a_select),
    .alu_operand_b_select(alu_operand_b_select),
    .alu_result_equal_zero(alu_result_equal_zero),
    .clock(clock),
    .data_mem_address(address),
    .data_mem_read_data(read_data),
    .data_mem_write_data(write_data),
    .inst(inst),
    .inst_funct3(inst_funct3),
    .inst_funct7(inst_funct7),
    .inst_opcode(inst_opcode),
    .next_pc_select(next_pc_select),
    .pc(pc),
    .pc_write_enable(pc_write_enable),
    .reg_writeback_select(reg_writeback_select),
    .regfile_write_enable(regfile_write_enable),
    .reset(reset)
  );
endmodule

(* src = "../core/singlecycle/singlecycle_control.sv:9.1-135.10" *)
module singlecycle_control(inst_opcode, take_branch, pc_write_enable, regfile_write_enable, alu_operand_a_select, alu_operand_b_select, alu_op_type, data_mem_read_enable, data_mem_write_enable, reg_writeback_select, next_pc_select);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  (* src = "../core/singlecycle/singlecycle_control.sv:25.42-25.69" *)
  wire [1:0] _22_;
  (* src = "../core/singlecycle/singlecycle_control.sv:16.24-16.35" *)
  output [1:0] alu_op_type;
  (* src = "../core/singlecycle/singlecycle_control.sv:14.18-14.38" *)
  output alu_operand_a_select;
  (* src = "../core/singlecycle/singlecycle_control.sv:15.18-15.38" *)
  output alu_operand_b_select;
  (* src = "../core/singlecycle/singlecycle_control.sv:17.18-17.38" *)
  output data_mem_read_enable;
  (* src = "../core/singlecycle/singlecycle_control.sv:18.18-18.39" *)
  output data_mem_write_enable;
  (* src = "../core/singlecycle/singlecycle_control.sv:10.18-10.29" *)
  input [6:0] inst_opcode;
  (* src = "../core/singlecycle/singlecycle_control.sv:20.24-20.38" *)
  output [1:0] next_pc_select;
  (* src = "../core/singlecycle/singlecycle_control.sv:12.18-12.33" *)
  output pc_write_enable;
  (* src = "../core/singlecycle/singlecycle_control.sv:19.24-19.44" *)
  output [2:0] reg_writeback_select;
  (* src = "../core/singlecycle/singlecycle_control.sv:13.18-13.38" *)
  output regfile_write_enable;
  (* src = "../core/singlecycle/singlecycle_control.sv:11.12-11.23" *)
  input take_branch;
  assign _00_ = | { _20_, _18_, _16_, _13_, _12_ };
  assign _01_ = | { _21_, _20_, _19_, _17_, _16_, _15_, _14_, _13_, _12_ };
  assign _02_ = | { _13_, _12_ };
  assign _03_ = | { _17_, _16_, _15_ };
  assign _04_ = | { _21_, _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_ };
  assign _05_ = | { _16_, _12_ };
  assign _06_ = | { _20_, _19_, _18_, _17_, _15_, _14_, _13_ };
  assign _07_ = | { _21_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_ };
  assign _08_ = | { _20_, _18_, _17_, _16_, _13_, _12_ };
  assign _09_ = | { _19_, _15_, _14_ };
  assign _10_ = | { _18_, _17_, _16_, _15_, _14_, _13_, _12_ };
  assign _11_ = | { _21_, _20_, _19_ };
  function [2:0] _35_;
    input [2:0] a;
    input [11:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        _35_ = b[2:0];
      4'b??1?:
        _35_ = b[5:3];
      4'b?1??:
        _35_ = b[8:6];
      4'b1???:
        _35_ = b[11:9];
      default:
        _35_ = a;
    endcase
  endfunction
  assign reg_writeback_select = _35_(3'hx, 12'h21a, { _18_, _03_, _14_, _02_ });
  assign _12_ = inst_opcode == (* full_case = 32'd1 *) (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *) 7'h6f;
  assign _13_ = inst_opcode == (* full_case = 32'd1 *) (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *) 7'h67;
  assign _14_ = inst_opcode == (* full_case = 32'd1 *) (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *) 7'h37;
  assign _15_ = inst_opcode == (* full_case = 32'd1 *) (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *) 7'h33;
  assign _16_ = inst_opcode == (* full_case = 32'd1 *) (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *) 7'h17;
  assign _17_ = inst_opcode == (* full_case = 32'd1 *) (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *) 7'h13;
  assign _18_ = inst_opcode == (* full_case = 32'd1 *) (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *) 7'h03;
  function [0:0] _43_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _43_ = b[0:0];
      2'b1?:
        _43_ = b[1:1];
      default:
        _43_ = a;
    endcase
  endfunction
  assign data_mem_read_enable = _43_(1'hx, 2'h2, { _18_, _01_ });
  assign _19_ = inst_opcode == (* full_case = 32'd1 *) (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *) 7'h63;
  assign _20_ = inst_opcode == (* full_case = 32'd1 *) (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *) 7'h23;
  assign _21_ = inst_opcode == (* full_case = 32'd1 *) (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *) 7'h0f;
  function [1:0] _47_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        _47_ = b[1:0];
      4'b??1?:
        _47_ = b[3:2];
      4'b?1??:
        _47_ = b[5:4];
      4'b1???:
        _47_ = b[7:6];
      default:
        _47_ = a;
    endcase
  endfunction
  assign alu_op_type = _47_(2'hx, 8'he4, { _17_, _15_, _19_, _00_ });
  function [0:0] _48_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _48_ = b[0:0];
      2'b1?:
        _48_ = b[1:1];
      default:
        _48_ = a;
    endcase
  endfunction
  assign alu_operand_b_select = _48_(1'hx, 2'h1, { _09_, _08_ });
  function [0:0] _49_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _49_ = b[0:0];
      2'b1?:
        _49_ = b[1:1];
      default:
        _49_ = a;
    endcase
  endfunction
  assign alu_operand_a_select = _49_(1'hx, 2'h1, { _06_, _05_ });
  function [0:0] _50_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _50_ = b[0:0];
      2'b1?:
        _50_ = b[1:1];
      default:
        _50_ = a;
    endcase
  endfunction
  assign regfile_write_enable = _50_(1'hx, 2'h1, { _11_, _10_ });
  function [0:0] _51_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _51_ = b[0:0];
      2'b1?:
        _51_ = b[1:1];
      default:
        _51_ = a;
    endcase
  endfunction
  assign data_mem_write_enable = _51_(1'hx, 2'h2, { _20_, _07_ });
  assign pc_write_enable = _04_ ? (* full_case = 32'd1 *) (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:41.9-132.16" *) 1'h1 : 1'hx;
  function [1:0] _53_;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "../core/singlecycle/singlecycle_control.sv:0.0-0.0|../core/singlecycle/singlecycle_control.sv:24.9-29.16" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _53_ = b[1:0];
      3'b?1?:
        _53_ = b[3:2];
      3'b1??:
        _53_ = b[5:4];
      default:
        _53_ = a;
    endcase
  endfunction
  assign next_pc_select = _53_(2'h0, { _22_, 4'h9 }, { _19_, _13_, _12_ });
  assign _22_ = take_branch ? (* src = "../core/singlecycle/singlecycle_control.sv:25.42-25.69" *) 2'h1 : 2'h0;
endmodule

(* src = "../core/singlecycle/singlecycle_ctlpath.sv:9.1-56.10" *)
module singlecycle_ctlpath(inst_opcode, inst_funct3, inst_funct7, alu_result_equal_zero, pc_write_enable, regfile_write_enable, alu_operand_a_select, alu_operand_b_select, data_mem_read_enable, data_mem_write_enable, reg_writeback_select, alu_function, next_pc_select);
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:22.18-22.30" *)
  output [4:0] alu_function;
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:27.17-27.28" *)
  wire [1:0] alu_op_type;
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:17.12-17.32" *)
  output alu_operand_a_select;
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:18.12-18.32" *)
  output alu_operand_b_select;
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:13.12-13.33" *)
  input alu_result_equal_zero;
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:19.12-19.32" *)
  output data_mem_read_enable;
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:20.12-20.33" *)
  output data_mem_write_enable;
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:11.18-11.29" *)
  input [2:0] inst_funct3;
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:12.18-12.29" *)
  input [6:0] inst_funct7;
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:10.18-10.29" *)
  input [6:0] inst_opcode;
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:23.18-23.32" *)
  output [1:0] next_pc_select;
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:15.12-15.27" *)
  output pc_write_enable;
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:21.18-21.38" *)
  output [2:0] reg_writeback_select;
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:16.12-16.32" *)
  output regfile_write_enable;
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:26.11-26.22" *)
  wire take_branch;
  (* module_not_derived = 32'd1 *)
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:49.17-54.6" *)
  alu_control alu_control (
    .alu_function(alu_function),
    .alu_op_type(alu_op_type),
    .inst_funct3(inst_funct3),
    .inst_funct7(inst_funct7)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:43.22-47.6" *)
  control_transfer control_transfer (
    .inst_funct3(inst_funct3),
    .result_equal_zero(alu_result_equal_zero),
    .take_branch(take_branch)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "../core/singlecycle/singlecycle_ctlpath.sv:29.25-41.6" *)
  singlecycle_control singlecycle_control (
    .alu_op_type(alu_op_type),
    .alu_operand_a_select(alu_operand_a_select),
    .alu_operand_b_select(alu_operand_b_select),
    .data_mem_read_enable(data_mem_read_enable),
    .data_mem_write_enable(data_mem_write_enable),
    .inst_opcode(inst_opcode),
    .next_pc_select(next_pc_select),
    .pc_write_enable(pc_write_enable),
    .reg_writeback_select(reg_writeback_select),
    .regfile_write_enable(regfile_write_enable),
    .take_branch(take_branch)
  );
endmodule

(* src = "../core/singlecycle/singlecycle_datapath.sv:9.1-165.10" *)
module singlecycle_datapath(clock, reset, data_mem_read_data, data_mem_address, data_mem_write_data, inst, pc, inst_opcode, inst_funct3, inst_funct7, alu_result_equal_zero, pc_write_enable, regfile_write_enable, alu_operand_a_select, alu_operand_b_select, reg_writeback_select, next_pc_select, alu_function);
  (* src = "../core/singlecycle/singlecycle_datapath.sv:32.17-32.29" *)
  input [4:0] alu_function;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:49.18-49.31" *)
  wire [31:0] alu_operand_a;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:28.11-28.31" *)
  input alu_operand_a_select;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:50.18-50.31" *)
  wire [31:0] alu_operand_b;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:29.11-29.31" *)
  input alu_operand_b_select;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:51.18-51.28" *)
  wire [31:0] alu_result;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:23.12-23.33" *)
  output alu_result_equal_zero;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:10.12-10.17" *)
  input clock;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:14.19-14.35" *)
  output [31:0] data_mem_address;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:13.19-13.37" *)
  input [31:0] data_mem_read_data;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:15.19-15.38" *)
  output [31:0] data_mem_write_data;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:54.18-54.27" *)
  wire [31:0] immediate;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:17.19-17.23" *)
  input [31:0] inst;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:21.18-21.29" *)
  output [2:0] inst_funct3;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:22.18-22.29" *)
  output [6:0] inst_funct7;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:20.18-20.29" *)
  output [6:0] inst_opcode;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:39.19-39.26" *)
  wire [4:0] inst_rd;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:40.19-40.27" *)
  wire [4:0] inst_rs1;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:41.19-41.27" *)
  wire [4:0] inst_rs2;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:46.18-46.25" *)
  wire [31:0] next_pc;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:31.17-31.31" *)
  input [1:0] next_pc_select;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:18.19-18.21" *)
  output [31:0] pc;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:44.18-44.27" *)
  wire [31:0] pc_plus_4;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:45.18-45.35" *)
  wire [31:0] pc_plus_immediate;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:26.11-26.26" *)
  input pc_write_enable;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:36.18-36.25" *)
  wire [31:0] rd_data;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:30.17-30.37" *)
  input [2:0] reg_writeback_select;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:27.11-27.31" *)
  input regfile_write_enable;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:11.12-11.17" *)
  input reset;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:37.18-37.26" *)
  wire [31:0] rs1_data;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:38.18-38.26" *)
  wire [31:0] rs2_data;
  (* src = "../core/singlecycle/singlecycle_datapath.sv:62.7-66.6" *)
  \$paramod\adder\WIDTH=32  adder_pc_plus_4 (
    .operand_a(32'd4),
    .operand_b(pc),
    .result(pc_plus_4)
  );
  (* src = "../core/singlecycle/singlecycle_datapath.sv:70.7-74.6" *)
  \$paramod\adder\WIDTH=32  adder_pc_plus_immediate (
    .operand_a(pc),
    .operand_b(immediate),
    .result(pc_plus_immediate)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "../core/singlecycle/singlecycle_datapath.sv:76.9-82.6" *)
  alu alu (
    .alu_function(alu_function),
    .operand_a(alu_operand_a),
    .operand_b(alu_operand_b),
    .result(alu_result),
    .result_equal_zero(alu_result_equal_zero)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "../core/singlecycle/singlecycle_datapath.sv:160.25-163.6" *)
  immediate_generator immediate_generator (
    .immediate(immediate),
    .inst(inst)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "../core/singlecycle/singlecycle_datapath.sv:150.25-158.6" *)
  instruction_decoder instruction_decoder (
    .inst(inst),
    .inst_funct3(inst_funct3),
    .inst_funct7(inst_funct7),
    .inst_opcode(inst_opcode),
    .inst_rd(inst_rd),
    .inst_rs1(inst_rs1),
    .inst_rs2(inst_rs2)
  );
  (* src = "../core/singlecycle/singlecycle_datapath.sv:86.7-93.6" *)
  \$paramod\multiplexer4\WIDTH=32  mux_next_pc_select (
    .in0(pc_plus_4),
    .in1(pc_plus_immediate),
    .in2({ alu_result[31:1], 1'h0 }),
    .in3(32'd0),
    .out(next_pc),
    .sel(next_pc_select)
  );
  (* src = "../core/singlecycle/singlecycle_datapath.sv:97.7-102.6" *)
  \$paramod\multiplexer2\WIDTH=32  mux_operand_a (
    .in0(rs1_data),
    .in1(pc),
    .out(alu_operand_a),
    .sel(alu_operand_a_select)
  );
  (* src = "../core/singlecycle/singlecycle_datapath.sv:106.7-111.6" *)
  \$paramod\multiplexer2\WIDTH=32  mux_operand_b (
    .in0(rs2_data),
    .in1(immediate),
    .out(alu_operand_b),
    .sel(alu_operand_b_select)
  );
  (* src = "../core/singlecycle/singlecycle_datapath.sv:115.7-126.6" *)
  \$paramod\multiplexer8\WIDTH=32  mux_reg_writeback (
    .in0(alu_result),
    .in1(data_mem_read_data),
    .in2(pc_plus_4),
    .in3(immediate),
    .in4(32'd0),
    .in5(32'd0),
    .in6(32'd0),
    .in7(32'd0),
    .out(rd_data),
    .sel(reg_writeback_select)
  );
  (* src = "../core/singlecycle/singlecycle_datapath.sv:131.7-137.6" *)
  \$paramod\register\WIDTH=32\INITIAL=4194304  program_counter (
    .clock(clock),
    .next(next_pc),
    .reset(reset),
    .value(pc),
    .write_enable(pc_write_enable)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "../core/singlecycle/singlecycle_datapath.sv:139.13-148.6" *)
  regfile regfile (
    .clock(clock),
    .rd_address(inst_rd),
    .rd_data(rd_data),
    .rs1_address(inst_rs1),
    .rs1_data(rs1_data),
    .rs2_address(inst_rs2),
    .rs2_data(rs2_data),
    .write_enable(regfile_write_enable)
  );
  assign data_mem_address = alu_result;
  assign data_mem_write_data = rs2_data;
endmodule
